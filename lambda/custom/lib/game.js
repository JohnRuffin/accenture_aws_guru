
/**
* Calculates the score of an incoming answer.
* @param {Array} answerArray The answer Array generated from getSlotValueArray()
* @param {Array} trolley The array of trolley items as defined in the session attributes
* @param {number} multiplier The multiplier to use to augment the score
* @returns {bool} Returns the score
*/
function calculateScore(answerArray, trolley, multiplier) {
	let score = 0;
	
	if(answerArray.length > 0) {
		for (let i = 0; i < answerArray.length; i++) {
			const item = answerArray[i];
			if(trolley.indexOf(item) >= 0) {
				score += 5 * multiplier;
			}
		}
	} 
	
	return score;
}

/**
* Extracts an array of slot values from the slot values object
* @param {Object} answerSlots The object generated by getSlotValues()
* @returns {Array} An array of ANY slot answers provided.
*/
function getSlotValueArray(answerSlots) {
	const slots = [answerSlots.itemA, answerSlots.itemB, answerSlots.itemC];
	let answerArray = [];
	
	for (let i = 0; i < slots.length; i++) {
		let slot = slots[i];
		if(slot && slot.heardAs) {
			answerArray.push(slot.heardAs);
		}
	}
	
	return answerArray;
}


function generateLevelQuestion(level) {
	switch (level) {
		case 1:
		
		break;
		
		default:
		break;
	}
}

const SOUNDS = {
	'ANNOUNCEMENT': 'soundbank://soundlibrary/home/amzn_sfx_doorbell_01',
	'SUCCESS': 'soundbank://soundlibrary/ui/gameshow/amzn_ui_sfx_gameshow_tally_positive_01',
	'FAILURE': 'soundbank://soundlibrary/ui/gameshow/amzn_ui_sfx_gameshow_negative_response_03',
	'INTRO': 'soundbank://soundlibrary/ui/gameshow/amzn_ui_sfx_gameshow_neutral_response_01',
}

module.exports = {
	calculateScore,
	getSlotValueArray,
	SOUNDS
}